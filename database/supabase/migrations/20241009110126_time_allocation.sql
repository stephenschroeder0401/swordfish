-- Create the employee_category_percentages table
CREATE TABLE employee_category_percentages (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  employee_id UUID NOT NULL,
  category_id UUID NOT NULL,
  percentage DECIMAL(5,2) NOT NULL CHECK (percentage >= 0 AND percentage <= 100),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Add foreign key constraints
ALTER TABLE employee_category_percentages
ADD CONSTRAINT fk_employee
FOREIGN KEY (employee_id)
REFERENCES employees(id)
ON DELETE CASCADE;

ALTER TABLE employee_category_percentages
ADD CONSTRAINT fk_category
FOREIGN KEY (category_id)
REFERENCES categories(id)
ON DELETE CASCADE;

-- Add a unique constraint to ensure one percentage per employee-category combination
ALTER TABLE employee_category_percentages
ADD CONSTRAINT unique_employee_category
UNIQUE (employee_id, category_id);

-- Create an index for faster lookups
CREATE INDEX idx_employee_category_percentages_employee_id ON employee_category_percentages(employee_id);
CREATE INDEX idx_employee_category_percentages_category_id ON employee_category_percentages(category_id);

-- Add a trigger to update the updated_at column
CREATE OR REPLACE FUNCTION update_employee_category_percentages_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_employee_category_percentages_updated_at
BEFORE UPDATE ON employee_category_percentages
FOR EACH ROW
EXECUTE FUNCTION update_employee_category_percentages_updated_at();

-- Add a function to ensure total percentage for an employee does not exceed 100%
CREATE OR REPLACE FUNCTION check_total_percentage()
RETURNS TRIGGER AS $$
DECLARE
  total_percentage DECIMAL(5,2);
BEGIN
  SELECT COALESCE(SUM(percentage), 0) INTO total_percentage
  FROM employee_category_percentages
  WHERE employee_id = NEW.employee_id AND id != NEW.id;

  total_percentage := total_percentage + NEW.percentage;

  IF total_percentage > 100 THEN
    RAISE EXCEPTION 'Total percentage for employee cannot exceed 100%%';
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER check_total_percentage
BEFORE INSERT OR UPDATE ON employee_category_percentages
FOR EACH ROW
EXECUTE FUNCTION check_total_percentage();